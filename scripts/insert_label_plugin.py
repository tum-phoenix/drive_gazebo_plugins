import xml.etree.ElementTree, xml.dom.minidom
from json import dumps, load
import argparse, sys, os

class readable_dir(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        prospective_dir=values
        if not os.path.isdir(prospective_dir):
            raise argparse.ArgumentTypeError("readable_dir:{0} is not a valid path".format(prospective_dir))
        if os.access(prospective_dir, os.R_OK):
            setattr(namespace,self.dest,prospective_dir)
        else:
            raise argparse.ArgumentTypeError("readable_dir:{0} is not a readable dir".format(prospective_dir))

parser = argparse.ArgumentParser(description="Add sign_label_plugin to an .sdf file generated by drive_sim_road_generation")
parser.add_argument("sdf_file", type=argparse.FileType("rw"), default=sys.stdin)
parser.add_argument("-o", "--output_directory", action=readable_dir, default=os.getcwd())
args = parser.parse_args()

with open('stvo_to_gtsrb.json') as f:
    stvo_to_gtsrb = load(f)

filename = args.sdf_file
file = xml.etree.ElementTree.parse(filename)
sdf = file.getroot()
signs_in_scene = {}
for model in sdf.find('world').findall('model'):
    if 'Sign' in model.attrib['name']:
        signs_in_scene[model.attrib['name']] = stvo_to_gtsrb[model.find('link').find('visual').find('material').find('script').find('name').text[5:]]

sign_label_plugin_element = """
<plugin name="sign_label_plugin" filename="libdrive_sign_label_plugin.so">
    <cameraName>camera</cameraName>
    <alwaysOn>true</alwaysOn>
    <updateRate>1</updateRate>
    <robotNamespace>/</robotNamespace>
    <topicName>camera_raw</topicName>
    <output_folder>{output_folder}</output_folder>
    <sign_area_threshold>60</sign_area_threshold>
    <signs_in_world>{signs}</signs_in_world>
</plugin>
""".format(signs=dumps(signs_in_scene), output_folder=args.output_directory)

for model in sdf.find('world').findall('model'):
    if 'EgoVehicle' in model.attrib['name']:
        plugin_found = False
        # if the plugin already has been added, update the entry, otherwise add it
        for plugin in model.find('link').find('sensor').findall('plugin'):
            if 'sign_label_plugin' in plugin.attrib['filename']:
                plugin = xml.etree.ElementTree.fromstring(sign_label_plugin_element)
            plugin_found = True
        if not plugin_found:
           model.find('link').find('sensor').append(xml.etree.ElementTree.fromstring(sign_label_plugin_element))

prettified_xml = xml.dom.minidom.parseString( xml.etree.ElementTree.tostring( sdf,'utf-8' ) ).toprettyxml(indent='  ', newl='', encoding="utf-8")
with open(os.path.abspath(args.sdf_file.name), "wb") as f:
    f.write(prettified_xml)
    f.close()

print('Succesfully modified SDF file, you can run the launch file now')
